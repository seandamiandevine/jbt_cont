#
#
# layout(matrix(1:2, 1,2))
#
# plot(post, type='l', lwd=1)
# hist(post, xlim=c(0,10))
# lm example --------------------------------------------------------------
rm(list=ls())
set.seed(2022)
N = 2000
x = rnorm(N)
y = 1.5 + 1*x + rnorm(N, 0, 2)
plot(x,y)
mu = mean(y); sig = sd(y)
sample_prior = function(n) {
b0 = rnorm(n, 1, 1)
b1 = rnorm(n, 1, 1)
s  = runif(n, 1, 10)
matrix(c(b0, b1, s), n, 3)
}
simulate = function(dat, par, n) {
y = rnorm(n, par[1] + par[2]*dat, par[3])
y
return(c(mean(y), sd(y)))
}
D = function(p,q) sqrt(sum((p-q)^2))
niter = 50000
pars  = sample_prior(niter)
post  = matrix(NA, niter, ncol(pars))
true  = c(mu,sig)
eps   = .5
pb = txtProgressBar(1,niter)
for(i in 1:niter) {
setTxtProgressBar(pb, i)
yhat = simulate(x, pars[i,], N)
S = D(true, yhat)
if(S < eps) post[i,] = pars[i,]
}
# set.seed(2022)
#
# x = rnorm(10000, 3, 2)
# mu = mean(x); sig = sd(x)
#
# prior = function() {
#
#   mu = runif(1, -10, 10)
#   s  = runif(1, 0, 10)
#
#   return(c(mu, s))
# }
#
#
# D = function(p, q) sqrt(sum((p-q)^2))
#
# eps = 1
#
# niter = 10000
# post  = c()
# for(i in 1:niter) {
#
#   theta = prior()
#   yi    = rnorm(1000, theta[1], theta[2])
#   dist  =  D(c(mu,sig), c(mean(yi), sd(yi)))
#
#   if(dist < eps)  post = c(post, theta)
#
# }
#
# n_accept = length(post)
# n_accept
#
#
# layout(matrix(1:2, 1,2))
#
# plot(post, type='l', lwd=1)
# hist(post, xlim=c(0,10))
# lm example --------------------------------------------------------------
rm(list=ls())
set.seed(2022)
N = 200
x = rnorm(N)
y = 1.5 + 1*x + rnorm(N, 0, 2)
plot(x,y)
mu = mean(y); sig = sd(y)
sample_prior = function(n) {
b0 = rnorm(n, 1, 1)
b1 = rnorm(n, 1, 1)
s  = runif(n, 1, 10)
matrix(c(b0, b1, s), n, 3)
}
simulate = function(dat, par, n) {
y = rnorm(n, par[1] + par[2]*dat, par[3])
y
return(c(mean(y), sd(y)))
}
D = function(p,q) sqrt(sum((p-q)^2))
niter = 50000
pars  = sample_prior(niter)
post  = matrix(NA, niter, ncol(pars))
true  = c(mu,sig)
eps   = .5
pb = txtProgressBar(1,niter)
for(i in 1:niter) {
setTxtProgressBar(pb, i)
yhat = simulate(x, pars[i,], N)
S = D(true, yhat)
if(S < eps) post[i,] = pars[i,]
}
post = post[!is.na(post[,1]),]
nrow(post)
colMeans(post)
hist(post[,1])
hist(post[,2])
hist(post[,3])
install.packages("EasyABC")
library(EasyABC)
?EasyABC
N = 100
x = rnorm(N)
y = 1 + 2.2*x + rnorm(N,0,2.3)
plot(x,y)
obj = function(par) {
rnorm(N, par[1]+par[2]*x, par[3])
}
obj(c(1,1,1))
prior = list(c("normal",0,10),c("normal",0,10), c('unif',0,10))
sum_stats = c(mean(x), sd(y))
sum_stats
sum_stats = c(mean(y), sd(y))
sum_stats
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 1000)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(mean(yhat), sd(yhat))
}
prior = list(c("normal",0,10),c("normal",0,10), c('unif',0,10))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 1000)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mean(yhat), sd(yhat)))
}
prior = list(c("normal",0,10),c("normal",0,10), c('unif',0,10))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 1000)
out
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mu=mean(yhat), sig=sd(yhat)))
}
prior = list(c("normal",0,10),c("normal",0,10), c('unif',0,10))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 1000)
out
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 1000, progress_bar = T)
out$stats
out$param
hist(out$param[,1], main='b0')
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b0')
hist(out$param[,3], main='b0')
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
out
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
prior = list(c("normal",0,5),c('normal', 0, 5), c('unif',0,10))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
library(EasyABC)
set.seed(2022)
N = 500
x = rnorm(N)
y = 1 + 2.2*x + rnorm(N,0,2.3)
sum_stats = c(mean(y), sd(y))
plot(x,y)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mu=mean(yhat), sig=sd(yhat)))
}
prior = list(c("normal",0,5),c('normal', 0, 5), c('unif',0,10))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
library(EasyABC)
set.seed(2022)
N = 500
x = rnorm(N)
y = 1 + 2.2*x + rnorm(N,0,2.3)
sum_stats = c(mean(y), sd(y))
plot(x,y)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mu=mean(yhat), sig=sd(yhat)))
}
prior = list(c("normal",0,5),c('normal', 2, 5), c('unif',0,10))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.2, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
library(EasyABC)
set.seed(2022)
N = 500
x = rnorm(N)
y = 1 + 2.2*x + rnorm(N,0,2.3)
sum_stats = c(mean(y), sd(y))
plot(x,y)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mu=mean(yhat), sig=sd(yhat)))
}
prior = list(c("normal",0,5),c('normal', 2, 5), c('unif',0,10))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
library(EasyABC)
set.seed(2022)
N = 500
x = rnorm(N)
y = 1 + 2.2*x + rnorm(N,0,2.3)
sum_stats = c(mean(y), sd(y))
plot(x,y)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mu=mean(yhat), sig=sd(yhat)))
}
prior = list(c("normal",0,5),c('normal', 0, 5), c('unif',0,10))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
library(EasyABC)
set.seed(2022)
N = 500
x = rnorm(N)
y = 1 + 2.2*x + rnorm(N,0,2.3)
sum_stats = c(mean(y), sd(y))
plot(x,y)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mu=mean(yhat), sig=sd(yhat)))
}
prior = list(c("normal",0,1),c('normal', 0, 1), c('unif',0,5))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
out = ABC_mcmc(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, n_rec = 10000, n_between_sampling = 100, progress_bar = T)
out = ABC_mcmc(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, n_rec = 10000, n_between_sampling = 100, progress_bar = T,
method='Drovandi')
out = ABC_mcmc(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, n_rec = 10000, n_between_sampling = 100, progress_bar = T,
method='Marjoram')
out = ABC_mcmc(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, n_rec = 1000, n_between_sampling = 100, progress_bar = T,
method='Marjoram')
colMeans(out$param)
library(EasyABC)
set.seed(2022)
N = 500
x = rnorm(N)
y = 1 + 2.2*x + rnorm(N,0,2.3)
sum_stats = c(mean(y), sd(y))
plot(x,y)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mu=mean(yhat), sig=sd(yhat)))
}
prior = list(c("normal",0,1),c('normal', 0, 1), c('unif',0,5))
out = ABC_mcmc(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, n_rec = 1000, n_between_sampling = 100, progress_bar = T,
method='Marjoram')
colMeans(out$param)
N = 500
x = rnorm(N)
y = rnorm(N, 1+2.1*x,2)
y
sum_stats = c(mean(y), sd(y))
plot(x,y)
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
return(c(mu=mean(yhat), sig=sd(yhat)))
}
prior = list(c("normal",0,1),c('normal', 0, 1), c('unif',0,5))
out = ABC_mcmc(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, n_rec = 1000, n_between_sampling = 100, progress_bar = T,
method='Marjoram')
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.1, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
prior
prior = list(c("normal",0,1),c("normal", 0, 1), c('unif',0,5))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.1, nb_simul = 10000, progress_bar = T)
y  = rnorm(N, b0+b1*x,s)
N  = 500
x  = rnorm(N)
b0 = 1
b1 = 2.1
s  = 2
y  = rnorm(N, b0+b1*x,s)
sum_stats = c(b0,b1,s) #c(mean(y), sd(y))
plot(x,y)
yhat = rnorm(N, par[1]+par[2]*x, par[3])
m    = lm(yhat ~ x)
yhat = rnorm(N, par[1]+par[2]*x, par[3])
obj = function(par) {
yhat = rnorm(N, par[1]+par[2]*x, par[3])
m    = lm(yhat ~ x)
return(c(coef(m)[1], coef(m)[2], sigma(m)))
}
prior = list(c("normal",0,1),c("normal", 0, 1), c('unif',0,5))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.1, nb_simul = 10000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, nb_simul = 50000, progress_bar = T)
prior = list(c("normal",0,10),c("normal", 0, 10), c('unif',0,5))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, nb_simul = 20000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
prior = list(c("normal",1,1),c("normal", 2, 1), c('unif',0,3))
out = ABC_rejection(model = obj, prior=prior, summary_stat_target = sum_stats,
tol=.05, nb_simul = 20000, progress_bar = T)
colMeans(out$param)
hist(out$param[,1], main='b0')
hist(out$param[,2], main='b1')
hist(out$param[,3], main='sd')
out$nsim
out$nrec
out$computime
out$weights
out$stats
out$param
out$param[1,]
out$stats[1,]
?ABC_rejection
View(ABC_rejection())
View(ABC_rejection)
?abc
dat = read.csv('Downloads/Sean_Devine-Data copy/match_data_shared.tsv', sep='\t')
View(dat)
View(dat)
dat = dat[order(dat$USER_ID, dat$MATCH_DELIVERY_DATE), ]
hist(table(dat$USER_ID))
x = c(5,1,6,5,4,6,7,12)
IQR(x)
sort(x)
median(x)
x = c(5,1,6,5,4,6,7,12)
l = x[x<median(x)]
u = x[x>median(x)]
median(u) - median(l)
IQR(x)
x = c(5,1,6,5,4,6,7,12)
l = x[x<median(x)]
u = x[x>median(x)]
median(u) - median(l)
IQR(x)
median(x)
l
median(l)
u
median(u)
IQR(x, type = 2)
IQR(x, type = 1)
IQR(x, type = 3)
IQR(x, type = 2)
?IQR
median(u)
quantile(x, 1/4)
quantile(x, 3/4) quantile(x, 1/4)
quantile(x, 3/4)
(42.8-38)/(4.8/sqrt(52))
4.8/(sqrt(52))
md = 42.8 - 38
se = 4.8/(sqrt(52))
md/se
x = rnorm(100)
y = 1 + 1.5*x + rnorm(100)
plot(x,y)
plot(x,y, ylim=c(min(y), max(y)+1))
plot(x,y, ylim=c(min(y), max(y)+2))
p = plot(x,y)
p
p@
p = plot(x,y, sub = 'test')
maxy = max(y)
midx = median(x)
p = plot(x,y)
maxy = max(y)
midx = median(x)
abline(h=maxy)
maxy = max(y)-.1
midx = median(x)
abline(h=maxy)
x = rnorm(100)
y = 1 + 1.5*x + rnorm(100)
panel_title = funtion() {
x = rnorm(100)
y = 1 + 1.5*x + rnorm(100)
panel_title = function() {
}
p = plot(x,y)
maxy = max(y)-.1
midx = median(x)
abline(h=maxy)
x = rnorm(100)
y = 1 + 1.5*x + rnorm(100)
panel_title = function() {
}
p = plot(x,y)
maxy = max(y)-1
midx = median(x)
abline(h=maxy)
posy = max(y)-4*sdy(y)
posx = median(x)
posy = max(y)-4*sd(y)
posx = median(x)
abline(h=posy)
posy = median(y)+4*sd(y)
posx = median(x)
abline(h=posy)
4*sd(y)
-4 + 1.96 * c(1.15, -1.15)
-4 + 1.96 * c(1.18, -1.18)
43*2
169 - 43*2
4 + 1.96 * c(1.18, -1.18)
4 + qnorm(.75) * c(-1.18, 1.18)
4 + qnorm(.975) * c(-1.18, 1.18)
4 + qnorm(.95) * c(-1.18, 1.18)
4 + qnorm(.975) * c(-1.18, 1.18)
4 + 3.39 * c(-1.18, 1.18)
4 + qt(.975) * c(-1.18, 1.18)
4 + qt(.975, 7) * c(-1.18, 1.18)
y = 8
yhat = 3 + .57*x
x = 10
y = 8
yhat = 3 + .57*x
y - yhat
168 - 6.5*2
168 - 11*2
168 - 3*2
168 - 33*2
168 - 27*2
168 - 12*2
168 - 25*2
168 - 29*2
setwd('Documents/jbt_cont/task/stim/')
list.files9
list.files()
list.files(pattern = '.png')
paste0(list.files(pattern = '.png'), collapse = ',')
paste0(list.files(pattern = '.png'), collapse = ', ')
paste0(f[grepl('0_',f)], collapse = ', ')
f = list.files(pattern = '.png')
paste0(f[grepl('0_',f)], collapse = ', ')
paste0(f[grepl('0_',f)], collapse = ', "')
paste0(f[grepl('0_',f)], collapse = ", '")
gsub(".png",".png'",x )
x = paste0(f[grepl('0_',f)], collapse = ", '")
gsub(".png",".png'",x )
x = paste0(f[grepl('1_',f)], collapse = ", '")
gsub(".png",".png'",x )
x = paste0(f[grepl('2_',f)], collapse = ", '")
gsub(".png",".png'",x )
gsub(".png",".png'",x )
x = paste0(f[grepl('3_',f)], collapse = ", '")
gsub(".png",".png'",x )
x = paste0(f[grepl('4_',f)], collapse = ", '")
gsub(".png",".png'",x )
f = list.files(pattern = '.png')
x = paste0(f[grepl('4_',f)], collapse = ", '")
gsub(".png",".png'",x )
